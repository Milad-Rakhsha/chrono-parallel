#
# Hand-made makefile for building the library of this unit
#
# 

include ../../makes/config.mak 
     
	# From now on, thank to config.mak, some useful variables
	# have been automatically set.


# List of files to compile to make the 'Chrono for CUDA' library unit

CPPFILES_LIB_CUDA = \
	ChCModelGPU.cpp \
	ChCModelGPUBody.cpp \
	ChCCollisionSystemGPU.cpp \
	ChContactContainerGPUsimple.cpp \
	ChContactGPUsimple.cpp \
	ChLcpIterativeSolverGPUsimple.cpp \
	ChLcpConstraintTwoGPUcontN.cpp \
	ChLcpConstraintTwoGPUcontT.cpp 
	
CUDAFILES_LIB = \
	ChLcpIterativeSolverGPUsimpleCU.cu \
	collide.cu 
	
	

# Rules for compilation

OFILES_LIB_CUDA= $(CPPFILES_LIB_CUDA:.cpp=.obj) $(CUDAFILES_LIB:.cu=.obj)

.SUFFIXES:
.SUFFIXES: .cpp .c .obj .cu

.cu.obj:
	$(CH_NVCC_COMPILER) $(CH_NVCCFLAGS) -c $< $(CH_INCLUDES) -o "$*.obj" >nul
	$(CH_NVCC_COMPILER2)

.cpp.obj:
	$(CC) $(CH_COMPILERFLAGS) -DCH_API_COMPILE_UNIT_GPU $(CH_INCLUDES) -c $< $(CH_COMPILERFLAG_FILEOUT)"$*.obj"



# TARGETS
 

# For default building: deletes objects, creates the library, creates the
# API documentation with doxygen, etc.

all: clean lib doxygen

 

# For building .lib, .DLL etc.
#


lib: $(CH_CUDALIB_MAKETARGET)

lib_chronoengineCUDA: $(OFILES_LIB_CUDA) 
	$(LD) $(CH_LINKSHAREDFLAGS) \
	      $(CH_CHRONOLIB) \
	      $(CH_CUDA_LIB) \
	      $(OFILES_LIB_CUDA) \
	      $(CH_LINKERFLAG_FILEOUT)"$(CH_CHRONOCUDASHAREDLNAME)" \
	      $(CH_LINKERFLAG_IMPLIB)"$(CH_CHRONOCUDALIBRARYNAME)"
	$(MT) -manifest "$(CH_BINDIR)/$(CH_LIBNAME)_CUDA.dll.manifest" -outputresource:"$(CH_BINDIR)/$(CH_LIBNAME)_CUDA.dll";#2
	$(DEL) "$(CH_BINDIR)$(D)$(CH_LIBNAME)_CUDA.dll.manifest"


	
# For cleaning all the .o, .obj, and other intermediate files

clean:
	$(DEL) *.obj
	$(DEL) *.o
